name: pr_stage_test

on:
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'README_zh-CN.md'
      - 'docs/**'
      - 'demo/**'
      - 'tools/**'
      - 'configs/**'
      - '.dev_scripts/**'
      - '.circleci/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cpu:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - python-version: ['3.10'] # minimum version
            torch: ['1.8.0']
          - python-version: ['3.10']  # maximum version
            torch: ['2.5.1']
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: true
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
      - name: Install mmpretrain dependencies
        run: |
          uv pip install git+https://github.com/VBTI-development/onedl-mmengine.git@main
          uv pip install ninja psutil
          uv pip install git+https://github.com/VBTI-development/onedl-mmcv.git@chore/rename-to-onedl-cv --no-build-isolation
          uv pip install -r pyproject.toml
      - name: Build and install
        run: uv pip install .
      - name: Install test dependencies
        run: uv pip install -r pyproject.toml --group tests
      - name: Run unittests and generate coverage report
        run: |
          set -e
          uv run coverage run --branch --source mmpretrain -m pytest tests/
          uv run coverage report -m
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          format: markdown
          output: both
          hide_branch_rate: false
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

  build_gpu:
    runs-on: ubuntu-22.04
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - python-version: '3.10' # minimum version
            torch: '1.8.0'
            image: 'nvidia/cuda:11.1.1-cudnn8-devel-ubuntu20.04'
          - python-version: '3.10'  # maximum version
            torch: '2.5.1'
            cuda: 'nvidia/cuda:12.8.0-cudnn-devel-ubuntu22.04'
    env:
        UV_CACHE_DIR: /__w/_uv_cache # set cache to be on same disk to avoid hardlink copies.
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: ${{ matrix.python-version }}
          cache-local-path: /__w/_uv_cache
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev libc6 libc6-dev
          apt-get clean -y

      - name: Install torch
        run: |
          uv pip install -v --torch-backend=auto torch==${{ matrix.torch }} torchvision
          uv cache clean
      - name: Install mmpretrain dependencies
        run: |
          uv pip install git+https://github.com/VBTI-development/onedl-mmengine.git@main
          uv pip install ninja psutil
          uv pip install git+https://github.com/VBTI-development/onedl-mmcv.git@chore/rename-to-onedl-cv --no-build-isolation
          uv pip install -r pyproject.toml
      - name: Build and install
        run: uv pip install -e .
      - name: Run unit tests with coverage
        run: |
          set -e
          uv run coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist
          uv run coverage xml

  build_windows:
    runs-on: windows-2022
    strategy:
      matrix:
        python-version: ['3.10']
        platform: [cpu]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: python -m pip install pip --upgrade
      - name: Install torch
        run: uv pip install -v torch==2.3.1 torchvision
      - name: Install mmpretrain dependencies
        run: |
          uv pip install git+https://github.com/VBTI-development/onedl-mmengine.git@main
          uv pip install ninja psutil
          uv pip install git+https://github.com/VBTI-development/onedl-mmcv.git@chore/rename-to-onedl-cv --no-build-isolation
          uv pip install -r pyproject.toml
      - name: Build and install
        run: uv pip install .
      - name: Run unittests
        run: |
          uv run pytest tests/ --ignore tests/test_models/test_backbones
